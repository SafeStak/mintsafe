@page "/yolowallet"
@page "/yolowallet/{SourceAddress}"
@using Mintsafe.Abstractions
@using Mintsafe.WasmApp.Services

<PageTitle>YOLO Wallet</PageTitle>

<input @bind="SourceAddress" placeholder="addr1..." style="width: 550px" />
<button @onclick="QueryAddressUtxos">Query</button>
@*@(Utxos?.Sum(u => u.Lovelaces)/1000000) ADA*@

<input @bind="DestinationAddress" placeholder="addr1..." style="width: 550px" />
<input @bind="Unit" placeholder="lovelace" />
<input @bind="Quantity" placeholder="10000000" />
<input @bind="Message" placeholder="" style="width: 550px" />
<input @bind="SigningKeyCborHex" placeholder="5820..." style="width: 550px" />
<button @onclick="SendPayment">Send</button>

@if (Utxos != null)
{
	<table class="table">
		<thead>
			<tr>
				<th>Hash</th>
				<th>Index</th>
				<th>Lovelaces</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var utxo in Utxos)
			{
				<tr>
					<td>@utxo.TxHash</td>
					<td>@utxo.OutputIndex</td>
					<td>@utxo.Lovelaces</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	[Parameter]
	public string? SourceAddress { get; set; }
	public string? DestinationAddress { get; set; }
	public string? Unit { get; set; }
	public long? Quantity { get; set; }
	public string? Message { get; set; }
	public string? SigningKeyCborHex { get; set; }
	[CascadingParameter]
	private Error Error { get; set; }

	[Inject]
	private IAddressUtxoService AddressUtxoService { get; set; }
	[Inject]
	private ISimplePaymentService SimplePaymentService { get; set; }

	private Utxo[]? Utxos { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			if (!string.IsNullOrWhiteSpace(SourceAddress))
			{
				Utxos = await AddressUtxoService.Get(SourceAddress);
			}
		}
		catch (Exception ex)
		{
			Error.ProcessError(ex);
		}
	}

	public async Task QueryAddressUtxos()
	{
		if (!string.IsNullOrWhiteSpace(SourceAddress))
		{
			Utxos = await AddressUtxoService.Get(SourceAddress);
		}
	}

	public async Task SendPayment()
	{
		// Validate fields	
		if (string.IsNullOrWhiteSpace(SourceAddress))
		{
			
		}

		if (Message == null)
		{
			throw new ArgumentNullException(nameof(Message));
		}
		if (Unit == null)
		{
			throw new ArgumentNullException(nameof(Unit));
		}
		if (Quantity == null)
		{
			throw new ArgumentNullException(nameof(Quantity));
		}

		//var payment = new YoloPayment
		//	{
		//		DestinationAddress = DestinationAddress,
		//		SourceAddress = SourceAddress,
		//		Message = new[] { Message },
		//		SigningKeyCborHex = SigningKeyCborHex,
		//		Values = new[] { new Value(Unit, Quantity.Value) } 
		//	};

		//var txId = await SimplePaymentService.MakePaymentAsync(payment);
	}

}